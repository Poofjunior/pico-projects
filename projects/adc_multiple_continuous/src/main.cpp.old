#include <pico/stdlib.h>
#include <hardware/adc.h>
#include <hardware/dma.h>
#include <hardware/regs/dreq.h>
#include <stdio.h>
#include <stdint.h>

volatile uint8_t adc_vals[5] = {0, 1, 2, 3, 4};

int main()
{
    stdio_usb_init();
    stdio_set_translate_crlf(&stdio_usb, false); // Don't replace outgoing chars.
    while (!stdio_usb_connected()){} // Block until connection to serial port.
    sleep_ms(50);

    // Setup ADC
    adc_gpio_init(26);
    adc_gpio_init(27);
    adc_gpio_init(28);
    adc_gpio_init(29);
    adc_init();
    adc_set_temp_sensor_enabled(true); // enable internal temperature sensor.
    adc_set_clkdiv(0); // Run at max speed.
    adc_set_round_robin(0x1f); // enable round-robin sampling of all 5 inputs.
    adc_select_input(0); // where to start in round-robin mode.
    adc_fifo_setup(
        true,    // Write each completed conversion to the sample FIFO
        true,    // Enable DMA data request (DREQ)
        1,       // Assert DREQ (and IRQ) at least 1 sample present
        false,   // Omit ERR bit (bit 15) since we have 8 bit reads.
        true     // shift each sample to 8 bits when pushing to FIFO
    );
    adc_fifo_drain();

    // Get an open DMA channel.
    int chan = dma_claim_unused_channel(true);
    dma_channel_config c = dma_channel_get_default_config(chan);
    // Pace data transfers as new data arrives on free-running ADC.
    channel_config_set_transfer_data_size(&c, DMA_SIZE_8);
    channel_config_set_read_increment(&c, false); // read from adc FIFO reg.
    channel_config_set_write_increment(&c, true);
    channel_config_set_irq_quiet(&c, true);
    channel_config_set_dreq(&c, DREQ_ADC);
    channel_config_set_enable(&c, true);
    // Apply configuration.
    dma_channel_configure(
        chan,                   // Channel to be configured
        &c,                     // The configuration we just created
        adc_vals,           // The initial write address
        &adc_hw->fifo,        // The initial read address
        count_of(adc_vals),     // Number of word transfers.
        false // Don't Start immediately.
    );
    printf("DMA al1_ctrl reg before starting: 0x%08lx\r\n",dma_hw->ch[chan].al1_ctrl);
    printf("ADC FC reg before starting: 0x%08lx\r\n", adc_hw->fcs);
    dma_channel_start(chan);
    adc_run(true); // Set free-running mode.
    sleep_ms(50);
    printf("DMA al1_ctrl reg after starting:  0x%08lx\r\n",dma_hw->ch[chan].al1_ctrl);
    printf("ADC FC reg after starting:  0x%08lx\r\n", adc_hw->fcs);

    while(true)
    {
        printf("ADC values: %03d | %03d | %03d | %03d | %03d || \
ADC FCS reg: 0x%08lx || DMA al1_ctrl reg: 0x%08lx\r",
               adc_vals[0], adc_vals[1], adc_vals[2], adc_vals[3], adc_vals[4],
               adc_hw->fcs, dma_hw->ch[chan].al1_ctrl);
        sleep_ms(17); // ~60[Hz] refresh rate.
    }
}
